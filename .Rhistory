pyramid.plot(
top15_terms$Positive,
top15_terms$Negative,
labels = top15_terms$word,
top.labels = c("Positive", "Word", "Negative"),
main = "Words in Common",
unit = NULL,
gap = 10,
space = 0.2
)
# Create a Pyramid Plot to visualize the differences
library(plotrix)
pyramid.plot(
top15_terms$Positive,
top15_terms$Negative,
labels = top15_terms$word,
top.labels = c("Positive", "Word", "Negative"),
main = "Words in Common",
unit = NULL,
gap = 10,
space = 0.2
)
# Create a Word Network plot with qdap'
word_associate(crude_df$text, match.string = "iran", stopwords = stopwords("en"), network.plot = TRUE, cloud.colors = c("gray85", "darkred"))
title(main = "Iran Tweet Associations")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = "iran",
stopwords = stopwords("en"),
network.plot = TRUE,
cloud.colors = c("gray85", "darkred")
)
title(main = "Iran Word Associations in #CrudeOil Tweets")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = "trump",
stopwords = stopwords("en"),
network.plot = TRUE,
cloud.colors = c("gray85", "darkred")
)
title(main = "Iran Word Associations in #CrudeOil Tweets")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = "trump",
stopwords = stopwords("en"),
network.plot = TRUE,
cloud.colors = c("gray85", "darkred")
)
title(main = "Trump Word Associations in #CrudeOil Tweets")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = "trump",
stopwords = stopwords("en"),
network.plot = TRUE,
cloud.colors = c("gray85", "darkred"),
proportional = TRUE
)
title(main = "Trump Word Associations in #CrudeOil Tweets")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = "trump",
stopwords = stopwords("en"),
network.plot = TRUE,
cloud.colors = c("gray85", "darkred"),
nw.label.proportional = TRUE
)
title(main = "Trump Word Associations in #CrudeOil Tweets")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = "strike",
stopwords = stopwords("en"),
network.plot = TRUE,
cloud.colors = c("gray85", "darkred"),
nw.label.proportional = TRUE
)
title(main = "Trump Word Associations in #CrudeOil Tweets")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = "hormuz",
stopwords = stopwords("en"),
network.plot = TRUE,
cloud.colors = c("gray85", "darkred"),
nw.label.proportional = TRUE
)
title(main = "Trump Word Associations in #CrudeOil Tweets")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = c("trump", "iran"),
stopwords = stopwords("en"),
network.plot = TRUE,
cloud.colors = c("gray85", "darkred"),
nw.label.proportional = TRUE
)
title(main = "Trump Word Associations in #CrudeOil Tweets")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = c("trump", "iran", "hormuz"),
stopwords = stopwords("en"),
network.plot = TRUE,
cloud.colors = c("gray85", "darkred"),
nw.label.proportional = TRUE
)
title(main = "Trump Word Associations in #CrudeOil Tweets")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = c("trump"),
stopwords = stopwords("en"),
network.plot = TRUE,
cloud.colors = c("gray85", "darkred"),
nw.label.proportional = TRUE
)
title(main = "Trump Word Associations in #CrudeOil Tweets")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = c("trump"),
stopwords = c("crude", stopwords("en")),
network.plot = TRUE,
cloud.colors = c("gray85", "darkred"),
nw.label.proportional = TRUE
)
title(main = "Trump Word Associations in #CrudeOil Tweets")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = c("trump"),
stopwords = c("crude", "oil", stopwords("en")),
network.plot = TRUE,
cloud.colors = c("gray85", "darkred"),
nw.label.proportional = TRUE
)
title(main = "Trump Word Associations in #CrudeOil Tweets")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = c("trump"),
stopwords = c("crude", stopwords("en")),
network.plot = TRUE,
cloud.colors = c("gray85", "darkred"),
nw.label.proportional = TRUE
)
title(main = "Trump Word Associations in #CrudeOil Tweets")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = c("trump"),
stopwords = c("crude", stopwords("en")),
wordcloud = TRUE,
cloud.colors = c("gray85", "darkred"),
nw.label.proportional = TRUE
)
title(main = "Trump Word Associations in #CrudeOil Tweets")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = c("trump"),
stopwords = c("crude", stopwords("en")),
wordcloud = TRUE,
nw.label.proportional = TRUE
)
title(main = "Trump Word Associations in #CrudeOil Tweets")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = c("trump"),
stopwords = c("crude", stopwords("en")),
wordcloud = TRUE,
cloud.colors = c("gray85", "darkred"),
nw.label.proportional = TRUE
)
title(main = "Trump Word Associations in #CrudeOil Tweets")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = c("trump"),
stopwords = c("crude", stopwords("en")),
wordcloud = TRUE,
cloud.colors = c("gray85", "darkred"),
nw.label.proportional = TRUE
)
title(main = "Words Associated with Trump in #CrudeOil Tweets")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = c("iran"),
stopwords = c("crude", stopwords("en")),
wordcloud = TRUE,
cloud.colors = c("gray85", "darkred"),
nw.label.proportional = TRUE
)
title(main = "Words Associated with Iran in #CrudeOil Tweets")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = c("hormuz"),
stopwords = c("crude", stopwords("en")),
wordcloud = TRUE,
cloud.colors = c("gray85", "darkred"),
nw.label.proportional = TRUE
)
title(main = "Words Associated with Hormuz in #CrudeOil Tweets")
# Create a Word Network plot with qdap'
word_associate(
crude_df$text,
match.string = c("fed"),
stopwords = c("crude", stopwords("en")),
wordcloud = TRUE,
cloud.colors = c("gray85", "darkred"),
nw.label.proportional = TRUE
)
title(main = "Words Associated with Fed in #CrudeOil Tweets")
library(qdap)  # Quantitative Discourse Analysis Package
library(RCurl)  # For HTTP Requests
library(stringr)  # For String Manipulation
library(tidytext)  # Natural Language Processing package in R
library(tidyverse)  # For data wrangling
library(tm)  # Text Mining
library(twitteR)  # To connect to the Twitter API
library(wordcloud)  # Generation of Word Clouds
# Store the required API keys for connection to Twitter
api_key <- "hBgUhFxipyNt2JT87QEGuV1Ok"
api_secret <- "kEkWlcKIC1nHamXMHOrYzZzsevGtnZ26j1XggoannDcvESRx9J"
access_token <- "898901988754153472-boY81BSVy95r26As36rYxzNX63C6ibl"
access_token_secret <- "obKPRXeSx6UiLUCQoirN95G2zt66TWepMbKQ032mzZFzL"
# Authenticate against the Twitter API
setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)
# Query tweets related to "#crudeoil"
crude_tweets <- searchTwitter(searchString = "#crudeoil", n = 1000, lang = "en")
# Examine the crude_tweets object
head(crude_tweets)
# Convert the raw queried data into a data.frame object
crude_df <- twListToDF(crude_tweets)
# Examine the data.frame object
str(crude_df)
View(crude_df)
# Remove all preceding "RT" characters in Retweeted tweets
crude_df$text <- gsub(pattern = "RT", replacement = "", crude_df$text)
# Remove all Twitter user handles in Retweets
crude_df$text <- gsub(pattern = "@\\w+", replacement = "", crude_df$text)
# Convert all tweets to lower case
crude_df$text <- tolower(crude_df$text)
# Remove punctuation
crude_df$text <- removePunctuation(crude_df$text)
# Remove quotation marks
crude_df$text <- gsub(pattern = 'â€œ', replacement = "", crude_df$text)
# Remove URL links
crude_df$text <- gsub("http\\w+", "", crude_df$text)
# Replace contractions
crude_df$text <- replace_contraction(crude_df$text)
# Examine the cleaned text data
crude_df$text[1:10]
# Define a list of uninformative stop-words for removal
crude_stopwords <- c("crudeoil", "Crudeoil", "crude", "oil", "oott", stopwords("en"))
# Remove all stop words
crude_df$text <- removeWords(crude_df$text, crude_stopwords)
# Remove all whitespace
crude_df$text <- stripWhitespace(crude_df$text)
# Examine the text data without stop words
crude_df$text[1:10]
# Explore the most common words in the data set
crude_df %>%
unnest_tokens(word, text) %>%
group_by(word) %>%
count() %>%
arrange(desc(n)) %>%
head(n = 10) %>%
ggplot(mapping = aes(x = reorder(word, desc(n)), y = n, fill = word)) +
geom_col() +
labs(
title = "Word Frequency in #crudeoil tweets",
subtitle = "As of 23rd June 2019",
x = "Word",
y = "Frequency"
) +
theme(legend.position = "none")
# Generate a simple word cloud on the Twitter data
wordcloud(
words = crude_df$text,
min.freq = 15,
colors = brewer.pal(8, "Dark2"),
random.color = TRUE,
max.words = 250
)
# Define a Polarity Object for the set of #crudeoil tweets
crude_polarity <- polarity(crude_df$text)
library(qdap)  # Quantitative Discourse Analysis Package
library(RCurl)  # For HTTP Requests
library(stringr)  # For String Manipulation
library(tidytext)  # Natural Language Processing package in R
library(tidyverse)  # For data wrangling
library(tm)  # Text Mining
library(twitteR)  # To connect to the Twitter API
library(wordcloud)  # Generation of Word Clouds
library(qdap)  # Quantitative Discourse Analysis Package
library(RCurl)  # For HTTP Requests
library(stringr)  # For String Manipulation
library(tidytext)  # Natural Language Processing package in R
library(tidyverse)  # For data wrangling
library(tm)  # Text Mining
library(twitteR)  # To connect to the Twitter API
library(wordcloud)  # Generation of Word Clouds
# Store the required API keys for connection to Twitter
api_key <- "hBgUhFxipyNt2JT87QEGuV1Ok"
api_secret <- "kEkWlcKIC1nHamXMHOrYzZzsevGtnZ26j1XggoannDcvESRx9J"
access_token <- "898901988754153472-boY81BSVy95r26As36rYxzNX63C6ibl"
access_token_secret <- "obKPRXeSx6UiLUCQoirN95G2zt66TWepMbKQ032mzZFzL"
# Authenticate against the Twitter API
setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)
# Query tweets related to "#crudeoil"
crude_tweets <- searchTwitter(searchString = "#crudeoil", n = 1000, lang = "en")
# Examine the crude_tweets object
head(crude_tweets)
# Convert the raw queried data into a data.frame object
crude_df <- twListToDF(crude_tweets)
# Examine the data.frame object
str(crude_df)
View(crude_df)
# Remove all preceding "RT" characters in Retweeted tweets
crude_df$text <- gsub(pattern = "RT", replacement = "", crude_df$text)
# Remove all Twitter user handles in Retweets
crude_df$text <- gsub(pattern = "@\\w+", replacement = "", crude_df$text)
# Convert all tweets to lower case
crude_df$text <- tolower(crude_df$text)
# Remove punctuation
crude_df$text <- removePunctuation(crude_df$text)
# Remove quotation marks
crude_df$text <- gsub(pattern = 'â€œ', replacement = "", crude_df$text)
# Remove URL links
crude_df$text <- gsub("http\\w+", "", crude_df$text)
# Replace contractions
crude_df$text <- replace_contraction(crude_df$text)
# Examine the cleaned text data
crude_df$text[1:10]
# Define a list of uninformative stop-words for removal
crude_stopwords <- c("crudeoil", "Crudeoil", "crude", "oil", "oott", stopwords("en"))
# Remove all stop words
crude_df$text <- removeWords(crude_df$text, crude_stopwords)
# Remove all whitespace
crude_df$text <- stripWhitespace(crude_df$text)
# Examine the text data without stop words
crude_df$text[1:10]
# Explore the most common words in the data set
crude_df %>%
unnest_tokens(word, text) %>%
group_by(word) %>%
count() %>%
arrange(desc(n)) %>%
head(n = 10) %>%
ggplot(mapping = aes(x = reorder(word, desc(n)), y = n, fill = word)) +
geom_col() +
labs(
title = "Word Frequency in #crudeoil tweets",
subtitle = "As of 23rd June 2019",
x = "Word",
y = "Frequency"
) +
theme(legend.position = "none")
# Generate a simple word cloud on the Twitter data
wordcloud(
words = crude_df$text,
min.freq = 15,
colors = brewer.pal(8, "Dark2"),
random.color = TRUE,
max.words = 250
)
# Define a Polarity Object for the set of #crudeoil tweets
crude_polarity <- polarity(crude_df$text)
# Export the analysis to an R Script
purl("crude-oil-sentiment-analysis.Rmd")
library(knitr)  # Export R Notebook to R Script
library(qdap)  # Quantitative Discourse Analysis Package
library(RCurl)  # For HTTP Requests
library(stringr)  # For String Manipulation
library(tidytext)  # Natural Language Processing package in R
library(tidyverse)  # For data wrangling
library(tm)  # Text Mining
library(twitteR)  # To connect to the Twitter API
library(wordcloud)  # Generation of Word Clouds
# Export the analysis to an R Script
purl("crude-oil-sentiment-analysis.Rmd")
library(knitr)  # Export R Notebook to R Script
library(qdap)  # Quantitative Discourse Analysis Package
library(RCurl)  # For HTTP Requests
library(stringr)  # For String Manipulation
library(tidytext)  # Natural Language Processing package in R
library(tidyverse)  # For data wrangling
library(tm)  # Text Mining
library(twitteR)  # To connect to the Twitter API
library(wordcloud)  # Generation of Word Clouds
shiny::runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
shiny::runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
shiny::runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
b <- Quandl("CHRIS/ICE_B1")
d <- Quandl("CHRIS/CME_DC1")
View(b)
View(d)
comb <- b %>% left_join(d)
View(comb)
b <- b %>% rename(Settle = Brent.Settle)
b <- b %>% rename(Brent.Settle = Settle)
d <- d %>% rename(Dubai.Settle = Settle)
comb <- b %>% left_join(d)
comb <- b %>% right_join(d)
comb <- b %>% left_join(d, by = Date)
View(b)
View(d)
comb <- b %>% left_join(d, by = Date)
str(b)
comb <- b %>% left_join(d, by = "Date")
View(comb)
b <- Quandl("CHRIS/ICE_B1")
d <- Quandl("CHRIS/CME_DC1")
comb <- b %>% left_join(d, by = "Date", suffix = c(".Brent", ".Dubai"))
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
install.packages("parallel")
detectCores()
library(parallel)
detectCores()
shiny::runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
shiny::runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
runApp('C:/Users/Nicholas/Desktop/GitHub Projects/R/commodity-trading-dashboards-in-shiny')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
